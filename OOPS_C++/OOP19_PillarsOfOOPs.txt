There are 4 pillars of OOPs:

1) Data Abstraction (data hiding):
   Abstraction is the process of hiding the implementation details and showing only the essential
   features of an object.


2) Inheritance (Reusability):
   Inheritance is a mechanism where a new class (derived or child class) can inherit the properties
   and behaviors of an existing class (base or parent class). It promotes code reusability and
   establishes a relationship between the two classes.

   There are 5 types of inheritance in C++:

   i)   Single Inheritance:
        Diagram: Base --> Derived1
        Explanantion: A class inherits from only one parent class.

   ii)  Multiple Inheritance (not supported in Java):
        Diagram: Base --> Derived1
                 Derived2 --> Derived1
        Explanantion: A class inherits from two or more parent classes. This also gives birth
                      to "diamond problem".

   iii) Multilevel Inheritance:
        Diagram: Base --> Derived2
                 Derived2 --> Derived3
        Explanantion: A class inherits from another class, which in turn inherits from another class.
                      
   iv)  Hierarchical Inheritance:
        Diagram: Base2 --> Derived4
                 Base2 --> Derived5
        Explanantion: Two or more classes inherit from the same parent class.

   v)   Hybrid Inheritance:
        Diagram: Base --> Derived1
                 Base --> Derived2
                 Derived3 --> Derived2
                 Derived6 --> Derived3, Derived1
        Explanantion: A class inherits from multiple parent classes, and one of those parent classes
                      also inherits from another class. This is actually Combination of Multiple and
                      Multilevel Inheritance.


3) Polymorphism (Object to take many forms):
   Polymorphism allows objects of different types to be treated as objects of a common type.
   It provides a way to perform a single action in different ways. Polymorphism is often achieved
   through function overloading and function overriding.
   C++ supports both compile-time polymorphism (function overloading) and runtime polymorphism
   (function overriding through virtual functions). Virtual functions are declared in the base class
   and overridden in derived classes.


4) Encapsulation (Data bundling):
   Encapsulation is the bundling of data (attributes) and the methods (functions) that operate on
   the data into a single unit known as a class. It restricts direct access to some of an object's
   components and can prevent the accidental modification of data.
   In C++, encapsulation is achieved through the use of access specifiers (private, protected, and
   public). Members declared as private are accessible only within the class, while protected members
   are accessible within the class and its subclasses. Public members are accessible from anywhere.
